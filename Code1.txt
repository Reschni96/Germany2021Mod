campaignTrail_temp.election_json = JSON.parse("[{\"model\": \"campaign_trail.election\", \"pk\": 9, \"fields\": {\"year\": 2021, \"summary\": \"<p>After serving as chancellor of Germany for 16 years, Angela Merkel is preparing to step down. Consequently, the federal election in 2021 will mark a significant milestone in the history of the Federal Republic of Germany, as no incumbent chancellor will be defending their position. Three parties are currently engaged in serious competition for the opportunity to lead Germany into a new era.</p><p>Prominent issues in this election include the Covid pandemic and its response, climate change and the transition to renewable energies. Additionally, foreign policy, tax policy, digitalization, and social security are also key concerns for many voters.</p>\", \"image_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Flag_of_Germany.svg/1200px-Flag_of_Germany.svg.png\", \"winning_electoral_vote_number\": 368, \"advisor_url\": \"https://i.ibb.co/PQrG6fR/advisors.jpg\", \"recommended_reading\": \"\", \"has_visits\": 0, \"no_electoral_majority_image\": \"/static/images/2012-no-majority.jpg\"}}]");
campaignTrail_temp.candidate_json = JSON.parse("[{\"model\": \"campaign_trail.candidate\", \"pk\": 77, \"fields\": {\"first_name\": \"\", \"last_name\": \"CDU/CSU\", \"election\": 9, \"party\": \"Christian Democratic Union/Christian Social Union\", \"state\": \"-\", \"priority\": 1, \"description\": \"<li><b>Abbreviation: CDU/CSU</b></li><li><b>Name: Christian Democratic Union/Christian Social Union</b></li><p>The CSU (in Bavaria) and CDU (in the rest of Germany) are the dominant center-right parties in Germany. They were founded in the aftermath of the Second World War and have dominated German politics ever since - more often than not, the chancellor has been a member of the CDU.</p><p>In the lead-up to the 2021 election, the alliance of those two parties finds itself in an uncertain state, though. For more than sixteen years, Angela Merkel has been the face of the CDU. However, her handpicked successor Annegret Kramp-Karrenbauer resigned as party leader less than a year before the election, making it unclear who will be the chancellor candidate.</p><p>The party has several competing wings - a moderate wing that wants to broadly continue Merkel’s policy and a conservative wing that wants to return closer to the roots of the party. Meanwhile, the CSU might want to place their leader as chancellor candidate for the two parties. Whoever ends up being the chancellor candidate is starting this election campaign in the lead.</p>\", \"color_hex\": \"#28282B\", \"secondary_color_hex\": \"#77797D\", \"is_active\": 1, \"image_url\": \"https://i.imgur.com/XGtdJT9.jpg\", \"electoral_victory_message\": \" \", \"electoral_loss_message\": \" \", \"no_electoral_majority_message\": \"\", \"description_as_running_mate\": \"\", \"candidate_score\": 1.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 78, \"fields\": {\"first_name\": \"\", \"last_name\": \"SPD\", \"election\": 9, \"party\": \"Social Democratic Party\", \"state\": \"-\", \"priority\": 2, \"description\": \"<p><li><b>Abbreviation: SPD</b></li><li><b>Name: Social Democratic Party</b></li><p>The Social Democratic Party of Germany (SPD) is one of the major political parties in Germany and has played a significant role in the country's political landscape since its establishment in 1875. Since the Second World War, it has led the government several times.</p><p>In 2021, the party is in a bad state though. For the last eight years, it had the thankless job of being the junior coalition partner of the CDU/CSU. A lot of party members want a more left-wing vision for the party opposed to the more centrist approach in the last years. These feelings culminated in the election of Norbert Walter-Borjans and Saskia Esken, two relatively unknown but left politicians as party leaders in 2019.</p><p>However, none of those two want to become chancellor candidate. With how much the party is struggling in the polls - registering below 15% at times - it’s unclear how much sense it makes to nominate a chancellor candidate at all.</p>\", \"color_hex\": \"#D61A29\", \"secondary_color_hex\": \"#F5878F\", \"is_active\": 1, \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Sozialdemokratische_Partei_Deutschlands%2C_Logo_um_2000.svg/2048px-Sozialdemokratische_Partei_Deutschlands%2C_Logo_um_2000.svg.png\", \"electoral_victory_message\": \"\", \"electoral_loss_message\": \"\", \"no_electoral_majority_message\": \"\", \"description_as_running_mate\": \"\", \"candidate_score\": 1.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 79, \"fields\": {\"first_name\": \"\", \"last_name\": \"Green Party\", \"election\": 9, \"party\": \"Alliance 90/The Greens\", \"state\": \"-\", \"priority\": 3, \"description\": \"<p><li><b>Abbreviation: Green Party</b></li><li><b>Name: Alliance 90/The Greens</b></li></p><p>The Green Party is a relatively young party, having been founded in 1980 as a consequence of the environmental movement in the 1970s. In 1993, it merged with Alliance 90, an East German civil rights party. Since then, it has transformed from a party focused only on environmental policies and pacifism to a general center-left party, though there's still a strong focus on climate change and the environment.</p><p>In the last few years, the Green Party has become stronger and stronger. They are members of the majority of state governments and even lead one such government. With climate change being one of the most important topics this election season, they prepare to nominate a chancellor candidate and hope to capture the chancellorship for the first time in their history.</p><p>However, the Green Party is known for having strong showings in the polls and being unable to actually convert that to votes come election day. For now, they look like the main contender of the CDU/CSU, but a lot can still change.</p>\", \"color_hex\": \"#13A12D\", \"secondary_color_hex\": \"#8FDB8F\", \"is_active\": 1, \"image_url\": \"https://i.ibb.co/tQmtGBz/Greens.png\", \"electoral_victory_message\": \"\", \"electoral_loss_message\": \"\", \"no_electoral_majority_message\": \"\", \"description_as_running_mate\": \"'\", \"candidate_score\": 1.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 303, \"fields\": {\"first_name\": \"\", \"last_name\": \"FDP\", \"election\": 9, \"party\": \"Free Democratic Party\", \"state\": \"-\", \"priority\": 4, \"description\": \"'\", \"color_hex\": \"#F5F518\", \"secondary_color_hex\": \"#FAFA9B\", \"is_active\": 0, \"image_url\": \"'\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"'\", \"candidate_score\": 1.0}},{\"model\": \"campaign_trail.candidate\", \"pk\": 304, \"fields\": {\"first_name\": \"\", \"last_name\": \"The Left\", \"election\": 9, \"party\": \"The Left\", \"state\": \"-\", \"priority\": 5, \"description\": \"'\", \"color_hex\": \"#C910BA\", \"secondary_color_hex\": \"#F595ED\", \"is_active\": 0, \"image_url\": \"'\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"'\", \"candidate_score\": 1.0}},{\"model\": \"campaign_trail.candidate\", \"pk\": 305, \"fields\": {\"first_name\": \"\", \"last_name\": \"AfD\", \"election\": 9, \"party\": \"Alternative for Germany\", \"-\": \"New York\", \"priority\": 6, \"description\": \"'\", \"color_hex\": \"#2B8FE0\", \"secondary_color_hex\": \"#85BEED\", \"is_active\": 0, \"image_url\": \"'\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"'\", \"candidate_score\": 1.0}},{\"model\": \"campaign_trail.candidate\", \"pk\": 306, \"fields\": {\"first_name\": \"\", \"last_name\": \"Others\", \"election\": 9, \"party\": \"Minor Parties\", \"state\": \"-\", \"priority\": 7, \"description\": \"'\", \"color_hex\": \"#807E7F\", \"secondary_color_hex\": \"#C9C7C9\", \"is_active\": 0, \"image_url\": \"'\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"'\", \"candidate_score\": 1.0}},{\"model\": \"campaign_trail.candidate\", \"pk\": 307, \"fields\": {\"first_name\": \"Armin\", \"last_name\": \"Laschet\", \"election\": 9, \"party\": \"CDU\", \"state\": \"North Rhine-Westphalia\", \"priority\": 8, \"description\": \"'\", \"color_hex\": \"#0000FF\", \"secondary_color_hex\": \"#90C0FF\", \"is_active\": 0, \"image_url\": \"https://i.ibb.co/z4HQGwg/laschet2.jpg\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"<p>Armin Lascher is certainly a candidate</p>\", \"candidate_score\": 0.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 308, \"fields\": {\"first_name\": \"Friedrich\", \"last_name\": \"Merz\", \"election\": 9, \"party\": \"CDU\", \"state\": \"North Rhine-Westphalia\", \"priority\": 9, \"description\": \"'\", \"color_hex\": \"#0000FF\", \"secondary_color_hex\": \"#90C0FF\", \"is_active\": 0, \"image_url\": \"https://i.ibb.co/P4hnWXb/Merz.jpg\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"<p>Merz is also certainly a candidate.</p>\", \"candidate_score\": 0.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 309, \"fields\": {\"first_name\": \"Markus\", \"last_name\": \"Söder\", \"election\": 9, \"party\": \"CSU\", \"state\": \"Bavaria\", \"priority\": 10, \"description\": \"'\", \"color_hex\": \"#FF0000\", \"secondary_color_hex\": \"#FFA0A0\", \"is_active\": 0, \"image_url\": \"https://i.ibb.co/NZ4NSY9/Markus-S-der.jpg\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"<p>Söder is a candidate, but Bavarian.</p>\", \"candidate_score\": 0.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 310, \"fields\": {\"first_name\": \"Olaf\", \"last_name\": \"Scholz\", \"election\": 9, \"party\": \"SPD\", \"state\": \"Hamburg\", \"priority\": 11, \"description\": \"'\", \"color_hex\": \"#FF0000\", \"secondary_color_hex\": \"#FFA0A0\", \"is_active\": 0, \"image_url\": \"https://i.ibb.co/z735fdt/Scholz.jpg\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"<p>The one and only Scholzomat.</p>\", \"candidate_score\": 0.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 311, \"fields\": {\"first_name\": \"Annalena\", \"last_name\": \"Baerbock\", \"election\": 9, \"party\": \"Greens\", \"state\": \"Brandenburg\", \"priority\": 12, \"description\": \"'\", \"color_hex\": \"#FFFF00\", \"secondary_color_hex\": \"#FFFFC0\", \"is_active\": 0, \"image_url\": \"https://i.ibb.co/MP0P2yQ/Baerbock.jpg\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"A Green Party Candidate\", \"candidate_score\": 0.0}}, {\"model\": \"campaign_trail.candidate\", \"pk\": 312, \"fields\": {\"first_name\": \"Robert\", \"last_name\": \"Habeck\", \"election\": 9, \"party\": \"Greens\", \"state\": \"Schleswig-Holstein\", \"priority\": 13, \"description\": \"'\", \"color_hex\": \"#00C100\", \"secondary_color_hex\": \"#A1FFA1\", \"is_active\": 0, \"image_url\": \"https://i.ibb.co/VBZWCSM/habeck.jpg\", \"electoral_victory_message\": \"'\", \"electoral_loss_message\": \"'\", \"no_electoral_majority_message\": \"'\", \"description_as_running_mate\": \"Another Green Candidate\", \"candidate_score\": 0.0}}]");
campaignTrail_temp.running_mate_json = JSON.parse("[{\"model\": \"campaign_trail.running_mate\", \"pk\": 47, \"fields\": {\"candidate\": 77, \"running_mate\": 307}}, {\"model\": \"campaign_trail.running_mate\", \"pk\": 56, \"fields\": {\"candidate\": 77, \"running_mate\": 308}}, {\"model\": \"campaign_trail.running_mate\", \"pk\": 76, \"fields\": {\"candidate\": 77, \"running_mate\": 309}}, {\"model\": \"campaign_trail.running_mate\", \"pk\": 106, \"fields\": {\"candidate\": 78, \"running_mate\": 310}}, {\"model\": \"campaign_trail.running_mate\", \"pk\": 105, \"fields\": {\"candidate\": 79, \"running_mate\": 311}}, {\"model\": \"campaign_trail.running_mate\", \"pk\": 81, \"fields\": {\"candidate\": 79, \"running_mate\": 312}}]");
campaignTrail_temp.opponents_default_json = JSON.parse("[{\"election\": 9, \"candidates\": [77, 78, 79, 303, 304, 305, 306]}]");
campaignTrail_temp.opponents_weighted_json = JSON.parse("[{\"election\": 9, \"candidates\": [77, 78, 79, 303, 304, 305, 306]}]");
campaignTrail_temp.global_parameter_json = JSON.parse("[{\"model\": \"campaign_trail.global_parameter\", \"pk\": 1, \"fields\": {\"vote_variable\": 1.125, \"max_swing\": 0.12, \"start_point\": 0.94, \"candidate_issue_weight\": 10.0, \"running_mate_issue_weight\": 0.0, \"issue_stance_1_max\": -0.71, \"issue_stance_2_max\": -0.3, \"issue_stance_3_max\": -0.125, \"issue_stance_4_max\": 0.125, \"issue_stance_5_max\": 0.3, \"issue_stance_6_max\": 0.71, \"global_variance\": 0.01, \"state_variance\": 0.005, \"question_count\": 25, \"default_map_color_hex\": \"#C9C9C9\", \"no_state_map_color_hex\": \"#999999\"}}]");
campaignTrail_temp.candidate_dropout_json = JSON.parse("[{\"model\": \"campaign_trail.candidate_dropout\", \"pk\": 1, \"fields\": {\"candidate\": 36, \"affected_candidate\": 18, \"probability\": 1.0}}]");
campaignTrail_temp.temp_election_list = [{"id": 9, "year": 2021, "is_premium": 0, "display_year": "2021"}];
campaignTrail_temp.show_premium = true;
campaignTrail_temp.premier_ab_test_version = -1;
campaignTrail_temp.credits = 'u/Vilvilea';
campaignTrail_temp.coalitionDifficulty = 1;
e=campaignTrail_temp;
e.collect_results = true;
$("#game_window")[0].style.backgroundImage = "url(https://i.imgur.com/9nFY6eE.jpg)";
nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#070785"
nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#031299"
document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title
$(".container")[0].style.backgroundColor = "#001f58"
document.body.background = "https://www.morgenpost.de/bin/src-207619493.jpg"
document.body.style.backgroundRepeat = "no-repeat";
document.body.style.backgroundSize = "cover";
document.getElementById("header").src = "https://cdn.discordapp.com/attachments/1109846390575730788/1131322097562558514/Germany3.png";
nct_stuff.themes[nct_stuff.selectedTheme].text_col = "white"
e.music = {};
e.music.shuffleEnabled = false;
e.music.Volume=0.3;

quotes = [`"Wir schaffen das!" - Angela Merkel`, `"Scheitert der Euro, scheitert Europa." - Angela Merkel`, `"Das Internet ist für uns alle Neuland." - Angela Merkel`, `"Die Demokratie ist kein Supermarkt." - Frank-Walther Steinmeier`, `In my homeland Baden-Württemberg we are all sitting in one boat.`, `"Rechts von der CDU/CSU darf es keine demokratisch legitimierte Partei geben" - Franz-Joseph Strauß`, `"Jetzt wächst zusammen, was zusammen gehört" - Willy Brandt`, `Was kümmert mich mein Geschwätz von gestern? - Konrad Adenauer`, `"Wer Visionen hat, sollte zum Arzt gehen" - Helmut Schmidt`, `There will never be a revolution in Germany. The bureaucratic paperwork for it is missing.`, ]
customquote = quotes[Math.floor((Math.random() * quotes.length))]

corrr="\n<h2>NEUE WAHLKAMPF-TOUR</h2><font id='wittyquote' size='4' color='white'><em>" + customquote + "</em></font>"

var element = document.getElementById('my-invisible-element');
if (!element) {

    let trackIndices;
    let shuffledIndices;

 $("#game_start").click((event) => {
    event.preventDefault();
    musicMode()
  })
musicMode = () => {
    $("#music_player")[0].children[0].style.display = "none"
    $("#music_player")[0].children[1].style.display = "none"
    document.getElementById("modLoadReveal").style.display = "none"
    document.getElementById("modloaddiv").style.display = "none"
    musicBox = document.getElementById("music_player")
    musicBox.style.display = ""
    var trackSel;
    e = campaignTrail_temp
    e.selectedSoundtrack = 0
    toTime = (seconds) => {
        var date = new Date(null);
        date.setSeconds(seconds);
        return date.toISOString().substr(11, 8);
    }
    generateTime = () => {
        // Get the audio element
        var audio = document.getElementById("campaigntrailmusic");
        timeTracker = document.createElement("div");
        timeTracker.style = `
  text-align:left;
  border-style:solid;
  border-width:3px;
  height:200px;
  width:200px;
  background-color:#999999;
  float:right;
  padding: 10px;
  `
        $("#trackSelParent")[0].prepend(timeTracker);
        $("#trackSelParent")[0].prepend(document.createElement("br"));
        var positionDisplay = document.createElement("gg");
        positionDisplay.id = "position-display";
        var timeSlider = document.createElement("input");
        timeSlider.type = "range";
        timeSlider.min = 0;
        timeSlider.max = 1;
        timeSlider.step = 0.001;
        timeSlider.value = 0;
        timeSlider.style.width = "200px";
        timeSlider.id = "time-slider";
        var pausePlay = document.createElement("button");
        pausePlay.id = "position-display";
        pausePlay.innerHTML = "<b>Pause</b>"
        pausePlay.style.width = "100%";
        pausePlay.style.margin = "2px";
        pausePlay.addEventListener("click", event => {
            event.preventDefault();
            updatePositionDisplay();
            let audio = document.getElementById("campaigntrailmusic");
            if (audio.paused) {
                audio.play();
                event.target.innerHTML = "<b>Pause</b>";
                return;
            }
            audio.pause();
            event.target.innerHTML = "<b>Play</b>";
            return;
        })
        var shuffleButton = document.createElement("button");
        shuffleButton.id = "shuffle-button";
        shuffleButton.innerHTML = "<b>Shuffle</b>"
        shuffleButton.style.width = "100%"
        shuffleButton.style.margin = "2px";;
        shuffleButton.addEventListener("click", event => {
            event.preventDefault();
            e.music.shuffleEnabled = !e.music.shuffleEnabled;
            event.target.innerHTML = e.music.shuffleEnabled ? "<b>Unshuffle</b>" : "<b>Shuffle</b>";
            if (e.music.shuffleEnabled) {
                shuffledIndices = shuffle(trackIndices.slice());
                let currentTrackIndex = Number(document.querySelector('input[name="trackSelector"]:checked').value);
                shuffledIndices = shuffledIndices.filter(index => index !== currentTrackIndex);
                shuffledIndices.unshift(currentTrackIndex);
            }
        });
        var skipButton = document.createElement("button");
        skipButton.id = "skip-button";
        skipButton.innerHTML = "<b>Skip</b>"
        skipButton.style.width = "100%";
        skipButton.style.margin = "2px"; // Add margin
        skipButton.addEventListener("click", event => {
            event.preventDefault();
            let selected = Number(document.querySelector('input[name="trackSelector"]:checked').value);
            let newSel;
            if (e.music.shuffleEnabled) {
                if (!shuffledIndices) {
                    shuffledIndices = shuffle(trackIndices.slice());
                }
                let currentIndex = shuffledIndices.findIndex(index => index === selected);
                if (currentIndex === shuffledIndices.length - 1) {
                    shuffledIndices = shuffle(trackIndices.slice());
                    currentIndex = -1;
                }
                newSel = shuffledIndices[currentIndex + 1];
            } else {
                newSel = selected + 1 === soundtracks[e.selectedSoundtrack].tracklist.length ? 0 : selected + 1;
            }
            let buttons = Array.from(document.getElementById("trackSel").children).filter(f => {
                    return f.tagName == "LABEL"
                }).map(f => f.children[0])
            buttons[newSel].click()
        });
        var volumeLabel = document.createElement("gg");
        volumeLabel.id = "volume-label";
        volumeLabel.innerHTML = "<br><b>Volume: </b>"
        var volumeSlider = document.createElement("input");
        volumeSlider.type = "range";
        volumeSlider.min = 0;
        volumeSlider.max = 1;
        volumeSlider.step = 0.001;
        volumeSlider.value = 0;
        volumeSlider.style.width = "200px";
        volumeSlider.id = "volume-slider";
        audio.volume= e.music.Volume;
        volumeSlider.value = audio.volume;
        timeTracker.appendChild(pausePlay);
        timeTracker.appendChild(shuffleButton);
        timeTracker.appendChild(skipButton);
        timeTracker.appendChild(positionDisplay);
        timeTracker.appendChild(timeSlider);
        timeTracker.appendChild(volumeLabel);
        timeTracker.appendChild(volumeSlider);
        updatePositionDisplay();
        function updatePositionDisplay() {
            positionDisplay.innerHTML = "<b>Time:</b> " + toTime(audio.currentTime) + "<br>";
            timeSlider.value = audio.duration ? audio.currentTime / audio.duration : 0;
        }
        function changeTime() {
            positionDisplay.innerHTML = "<b>Time:</b> " + toTime(audio.currentTime) + "<br>";
            audio.currentTime = timeSlider.value * audio.duration;
        }
        updateVolume = event => {
            audio.volume = event.target.value;
            e.music.Volume=audio.volume;
        }
        setInterval(updatePositionDisplay, 1000);
        timeSlider.addEventListener("input", changeTime);
        volumeSlider.addEventListener("input", updateVolume)
    }

    function newMusicPlayer() {
        trackSel = document.createElement("div");
        trackSel.id = "trackSelParent"
        let z = `<br><br><br><br><br><br><br><br><br><br><br><br><div id='trackSel' style="text-align:left;border-style:solid;border-width:3px;overflow-y: scroll;overflow-x: hidden;height:200px; width:400px;background-color:#999999;float:right;">`
        z += `<b><select id='selectSoundtrack'><option value='` + soundtracks[e.selectedSoundtrack].name + `'>` + soundtracks[e.selectedSoundtrack].name + "</option>"
        for (i in soundtracks) {
            if (soundtracks[e.selectedSoundtrack] != soundtracks[i]) {
                z += `<option value='` + soundtracks[i].name + `'>` + soundtracks[i].name + `</option>`
            }
        }
        z += `</select></b><br><br>`
            // <label><input type="radio" name="option" value="option1">Option 1</label><br>
        for (i in soundtracks[e.selectedSoundtrack].tracklist) {
            let a = soundtracks[e.selectedSoundtrack].tracklist[i]
            let b = `<label><input class="trackSelector" type="radio" name="trackSelector" value="` + i + `">` + a.name + `</label><br>`
            z += b
        }
        z += "</div><br><br>"
        trackSel.innerHTML = z
        musicBox.appendChild(trackSel);
        Array.from(document.getElementById("trackSel").children).filter(f => {
            return f.tagName == "LABEL"
        }).map(f => f.children[0])[0].checked = true
        soundtrackSelector = document.getElementById("selectSoundtrack")
        soundtrackSelector.onchange = function() {
            for (i in soundtracks) {
                if (soundtracks[i].name == soundtrackSelector.value) {
                    e.selectedSoundtrack = i
                    break
                }
            }
            e.music.shuffleEnabled = false;
            shuffledIndices = null;

            document.getElementById("trackSelParent").remove()
            newMusicPlayer()
        }
        var matches = document.querySelectorAll('.trackSelector');
        for (match in matches) {
            matches[match].onchange = function() {
                audio = $("#campaigntrailmusic")[0];
                audio.src = soundtracks[e.selectedSoundtrack].tracklist[this.value].url
                audio.currentTime = 0
            }
        }
        musicBox.children[2].loop = false
        musicBox.children[2].src = soundtracks[e.selectedSoundtrack].tracklist[0].url
        trackIndices = Array.from({length: soundtracks[e.selectedSoundtrack].tracklist.length}, (_, i) => i);

        musicBox.children[2].onended = function() {
            console.log("next track")
            let selected = Number(document.querySelector('input[name="trackSelector"]:checked').value);
            let newSel;
            if (e.music.shuffleEnabled) {
                if (!shuffledIndices) {
                    shuffledIndices = shuffle(trackIndices.slice());
                }
                let currentIndex = shuffledIndices.findIndex(index => index === selected);
                if (currentIndex === shuffledIndices.length - 1) {
                    shuffledIndices = shuffle(trackIndices.slice());
                    currentIndex = -1;
                }
                newSel = shuffledIndices[currentIndex + 1];
            } else {
                newSel = selected + 1 === soundtracks[e.selectedSoundtrack].tracklist.length ? 0 : selected + 1;
            }
            let buttons = Array.from(document.getElementById("trackSel").children).filter(f => {
                    return f.tagName == "LABEL"
                }).map(f => f.children[0])
            buttons[newSel].click()
        }

        for (w = 0; w < 7; w++) {
          document.getElementById("trackSelParent").appendChild(document.createElement("br"))
        }
        generateTime();
    }
    clamp = function(a, max, min, overflow = true) {
        if (overflow) {
            return a > max ? min : a < min ? max : a;
        }
        return a > max ? max : a < min ? min : a;
    }
    var soundtracks = {
        0: {
          name: "German Kulturgut",
          tracklist: [
            {
              "name": "Tagesthemen Intro die Ärzte",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296705669775400/Tagesthemen_Intro_Die_Arzte.mp3"
            },
            {
              "name": "Tagesschau Intro",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296698044534914/Tagesschau_Intro.mp3"
            },
            {
              "name": "Tagesschau Theme",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296495463833741/Hans_Carste__Henning_Lohner_-_ARD_Tagesschau_Theme.mp3"
            },
            {
              "name": "Tatort Intro",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296542708473906/Klaus_Doldinger_-_Tatort_Intro.mp3"
            },
            {
              "name": "Lindenstraße Musik",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296532390490172/Jurgen_Knieper_-_Lindenstrae_Titelmelodie.mp3"
            },
            {
              "name": "Das Lied der Deutschen",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296382335057980/August_Hoffmann_von_Fallersleben_-_Lied_der_Deutschen_German_National_Anthem.mp3"
            },
            {
              "name": "Europahymne",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296462551134340/Friedrich_Schiller__Ludwig_van_Beethoven_-_An_die_Freude_EU_Anthem.mp3"
            },
            {
              "name": "Einzug der Götter in Walhall",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296655837249657/Richard_Wagner__hr-Sinfonieorchester_-_Einzug_der_Gotter_in_Walhall_Das_Rheingold.mp3"
            }
        ]
            },
            1: {
          name: "German Oldies",
          tracklist: [
            {
              "name": "Nena – 99 Luftballons",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296608349327381/NENA_-_99_Luftballons.mp3"
            },
            {
              "name": "Trio – Da Da Da",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296755221270558/Trio_-_Da_Da_Da.mp3"
            },
            {
              "name": "Kraftwerk – Autobahn",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296574350303412/Kraftwerk_-_Autobahn.mp3"
            },
            {
              "name": "Udo Jürgens – Griechischer Wein ",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296762661978183/Udo_Jurgens_-_Griechischer_Wein.mp3"
            },
            {
              "name": "Udo Lindenberg – Sonderzug nach Pankow ",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296771319017544/Udo_Lindenberg_-_Sonderzug_nach_Pankow.mp3"
            },
            {
              "name": "Nina Hagen – Du hast den Farbfilm vergessen ",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296635834613781/Nina_Hagen_-_Du_hast_den_Farbfilm_vergessen.mp3"
            },
            {
              "name": "Nena – Irgendwie, Irgendwo, Irgendwann",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296615899070544/NENA_-_Irgendwie_Irgendwo_Irgendwann.mp3"
            },
            {
              "name": "Die Ärzte - Schrei nach Liebe",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296418104090744/Die_Arzte_-_Schrei_nach_Liebe.mp3"
            },
            {
              "name": "Die Ärzte - Deine Schuld",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296396750893077/Die_Arzte_-_Deine_Schuld.mp3"
            }
        ]
            },
            2: {
          name: "Modern German Music",
          tracklist: [
            {
              "name": "Wir sind Helden – Nur Ein Wort",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296791678160976/Wir_Sind_Helden_-_Nur_Ein_Wort.mp3"
            },
            {
              "name": "AnnenMayKantereit – Oft gefragt",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296345588772994/AnnenMayKantereit_-_Oft_Gefragt.mp3"
            },
            {
              "name": "Peter Fox – Schwarz zu Blau",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296645838028820/Peter_Fox_-_Schwarz_zu_Blau.mp3"
            },
            {
              "name": "KRAFTKLUB – Schüsse in die Luft",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296567064809522/Kraftklub_-_Schusse_in_die_Luft.mp3"
            },
            {
              "name": "Andreas Bourani – Auf Uns",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296341247672320/Andreas_Bourani_-_Auf_uns.mp3"
            },
            {
              "name": "Tim Bendzko – Nur Noch Kurz die Welt retten ",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296735856177282/Tim_Bendzko_-_Nur_Noch_Kurz_Die_Welt_Retten.mp3"
            },
            {
              "name": "Polarkreis 18 – Allein Allein",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131509584436154388/Polarkreis_18_-_Allein_Allein.mp3"
            }
        ]
            },
            3: {
          name: "Deutsche Volkslieder (CDU)",
          tracklist: [
            {
              "name": "Kein Schöner Land in dieser Zeit",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296350626140241/Anton_Wilhelm_von_Zuccalmaglio_-_Kein_schoner_Land_in_dieser_Zeit.mp3"
            },
            {
              "name": "Die Gedanken sind frei",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296366619009094/August_Hoffmann_von_Fallersleben_-_Die_Gedanken_sind_frei.mp3"
            },
            {
              "name": "Loreley (Ich weiß nicht, was soll es bedeuten)",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296500606046349/Heinrich_Heine__Friedrich_Silcher_-_Loreley_Ich_wei_nicht_was_soll_es_bedeuten.mp3"
            },
            {
              "name": "Du, Du liegst mir im Herzen",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296591505002516/Marlene_Dietrich-_Du_Du_Liegst_Mir_Im_Herzen.mp3"
            },
            {
              "name": "Wenn die bunten Fahnen wehen",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296329440702575/Alf_Zschiesche_-_Wenn_die_bunten_Fahnen_wehen.mp3"
            }
        ]
            },
            4: {
          name: "Deutsche Protestlieder (Greens)",
          tracklist: [
            {
              "name": "Gänsehaut - Karl der Käfer",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296471967338617/Gansehaut_-_Karl_der_Kafer.mp3"
            },
            {
              "name": "Ton Steine Scherben – Keine Macht für niemand",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296741602377738/Ton_Steine_Scherben_-_Keine_Macht_fur_niemand.mp3"
            },
            {
              "name": "Bots - Aufstehen",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296393466761226/Bots_-_Aufstehen.mp3"
            },
            {
              "name": "Fehlfarben - Ein Jahr (Es geht voran)",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296445107011694/Fehlfarben_-_Ein_Jahr_Es_geht_voran.mp3"
            },
            {
              "name": "Teller Bunte Knete - Stadtmensch",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296715027251270/Teller_Bunte_Knete_-_Stadtmensch.mp3"
            }
        ]
            },
            5: {
          name: "Deutsche Arbeiterlieder (SPD)",
          tracklist: [
            {
              "name": "Die Internationale",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296479164780654/Hannes_Wader_-_Die_Internationale.mp3"
            },
            {
              "name": "Wann wir schreiten Seit an Seit",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296517479747776/Hermann_Claudius__Michael_Englert_-_Wann_wir_schreiten_Seit_an_Seit.mp3"
            },
            {
              "name": "Brüder, zur Sonne, zur Freiheit",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296430389211166/Ernst_Busch_-_Bruder_zur_Sonne_zur_Freiheit.mp3"
            },
            {
              "name": "Auferstanden aus Ruinen (DDR Anthem)",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296491626045440/Hanns_Eisler__Johannes_Becher_-_Auferstanden_auf_Ruinen_DDR_Anthem.mp3"
            },
            {
              "name": "Das Arbeitsfrontlied",
              "url": "https://cdn.discordapp.com/attachments/1131296206908301423/1131296484445396992/Hannes_Wader_-_Einheitsfrontlied.mp3"
            }
        ]
            }
    }
    newMusicPlayer()
  }

      function shuffle(array) {
        let currentIndex = array.length, temporaryValue, randomIndex;

        while (0 !== currentIndex) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }

        return array;
    }


    function updateHeader() {
      var gameHeader = document.getElementsByClassName("game_header")[0];

      if (gameHeader.getAttribute("id") !== "modifiedHeader") {
        gameHeader.innerHTML = corrr;
        gameHeader.style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;
        gameHeader.setAttribute("id", "modifiedHeader");
        gameHeader.style.height="6.5em";
      }
    }

    var headerobserver = new MutationObserver(updateHeader);
    headerobserver.observe(document.documentElement, { childList: true, subtree: true });

    function updateCandidateForm() {

      const heading = document.querySelector("#candidate_form form h3");

      if (heading) {
        heading.textContent = "Please select your party:";
      }
     }

    function updateRunningMateForm() {

      const heading = document.querySelector("#running_mate_form form h3");

      if (heading) {
        heading.textContent = "Please select your candidate:";
      }
    }


    function removeCandidateSummary() {
      const candidateSummary = document.querySelector("#candidate_summary");
      if (candidateSummary) {
        const ulList = candidateSummary.querySelector("ul");
        if (ulList) {
          candidateSummary.removeChild(ulList);
        }
      }
    }

    function modifyAllocationForm() {

        const form = document.querySelector('form[name="game_type_selection"]');
            if(form){
            const select = form.querySelector('select[name="game_type_id"]');

            // change option value
            const option = select.querySelector('option[value="1"]');
            option.textContent = 'Proportional (Bundestag)';


            var optionToRemove = document.querySelector('option[value="2"]');
            if (optionToRemove) {
              optionToRemove.style.display = 'none';
            }

            // change h3 text
            const h3 = form.querySelector('h3');
            h3.textContent = 'How would you like the seats to be allocated';
            }
   }

    function changeOpponentSelectionDescription(){

            const opponentSelectionDescription = document.getElementById("opponent_selection_description_window");
            if(opponentSelectionDescription){
            opponentSelectionDescription.innerHTML = `<p><strong>Use the allocation method for the German Bundestag.</strong></p><p>The German electoral system is quite complex. Every voter has two votes, one for a party and one for a directly elected candidate in their constituency. Theoretically, half the parliament is determined first past the post by these direct elections and half proportionally through the party votes, with seats allocated with the Sainte-Laguë method on a per-state basis.<br> However, if a party receives more seats through this system than it would if the parliament was elected by strictly proportional votes, they get extra (overhanging) mandates and all over parties get compensatory mandates. Overall, all but three overhanging mandates get compensated. <br> To enter parliament, a party either needs 5% of the proportional vote or win in at least three districts. <br> For the purpose of this game, the system has been simplified. Only the proportional vote has been simulated - though there are some heuristics to guess the number of constituencies won by parties where this is relevant.</p>`;
            }
  }
  function addCoalitionDifficultyDropdown() {
        var difficultyDiv = document.getElementById("difficulty_level");
        if (difficultyDiv && !document.getElementById("coalitionDifficultyDropdown")) {
            var difficulties = ["Guaranteed", "Very Easy", "Easy", "Normal", "Hard", "Impossible"];
            var difficultyValues = [1000000, 5, 1.5, 1, 0.75, 0.2];
            var dropdown = document.createElement("select");
            dropdown.id = "coalitionDifficultyDropdown";

            for (var i = 0; i < difficulties.length; i++) {
                var opt = document.createElement("option");
                opt.text = difficulties[i];
                if (difficulties[i] === "Normal") {
                    opt.selected = true;
                }
                opt.value = difficultyValues[i];
                dropdown.options.add(opt);
            }

            var form = document.createElement("form");
            form.name = "coalition_difficulty_level_selection";
            var header = document.createElement("h3");
            header.textContent = "Select coalition difficulty:";
            form.appendChild(header);
            form.appendChild(dropdown);
            difficultyDiv.appendChild(form);

            var visitsForm = document.createElement("form");
            visitsForm.name = "state_visits_selection";
            var visitsHeader = document.createElement("h3");
            visitsHeader.textContent = "Enable state visits";
            visitsForm.appendChild(visitsHeader);
            var visitsCheckbox = document.createElement("input");
            visitsCheckbox.type = "checkbox";
            visitsCheckbox.id = "stateVisitsCheckbox";
            visitsCheckbox.checked = false;
            visitsForm.appendChild(visitsCheckbox);
            difficultyDiv.appendChild(visitsForm);

            visitsCheckbox.addEventListener("change", function() {
                campaignTrail_temp.election_json[0].fields.has_visits = this.checked ? 1 : 0;
            });

            var difficultyForm = document.querySelector('form[name="difficulty_level_selection"]');
            var difficultyHeader = difficultyForm.querySelector('h3');
            difficultyHeader.textContent = "Select campaign difficulty:";

            var forms = document.querySelectorAll("#difficulty_level form");
            for (var i = 0; i < forms.length; i++) {
              forms[i].style.display = "inline-block";
              forms[i].style.paddingLeft = "10px"; // adjust the value as needed
              forms[i].style.paddingRight = "10px"; // adjust the value as needed
            }

            dropdown.addEventListener("change", function() {
                campaignTrail_temp.coalitionDifficulty = this.value;
            });
        }
    }

    function walkAndReplace(node, wordsToFind) {
        if (node.nodeType === Node.TEXT_NODE) {
            // Ignore nodes that are already wrapped with our span
            if (node.parentNode.nodeName.toLowerCase() === "span" && node.parentNode.style.color === 'white') {
                return;
            }

            let matched = false;
            let newNodeValue = node.nodeValue;

            for(let word of wordsToFind) {
                let searchRegEx = new RegExp(word, 'g');
                if (searchRegEx.test(newNodeValue)) {
                    matched = true;
                    newNodeValue = newNodeValue.replace(searchRegEx, `<span style="color: white;">${word}</span>`);
                }
            }

            if (matched) {
                let div = document.createElement('div');
                div.innerHTML = newNodeValue;
                let parent = node.parentNode;
                while (div.firstChild) {
                    parent.insertBefore(div.firstChild, node);
                }
                parent.removeChild(node);
            }

        } else {
            for(let i = 0; i < node.childNodes.length; i++) {
                walkAndReplace(node.childNodes[i], wordsToFind);
            }
        }
    }

    let changesInProgress = false;

    // Define the MutationObserver
    let masterObserver = new MutationObserver(masterFunction);


    // Master function
    function masterFunction() {
        if (changesInProgress) return;
        changesInProgress = true;
        masterObserver.disconnect();

        // Call all the functions here
        updateCandidateForm();
        updateRunningMateForm();
        removeCandidateSummary();
        modifyAllocationForm();
        changeOpponentSelectionDescription();
        applyColorStyles();
        addCoalitionDifficultyDropdown();

        // Re-observe the document
        changesInProgress = false;
        masterObserver.observe(document.body, { childList: true, subtree: true });
    }

    // Start observing the document with the master observer
    masterObserver.observe(document.body, { childList: true, subtree: true });

    // Ensure we don't re-enter applyColorStyles
    function applyColorStyles() {
        let wordsToFind = ['Enable state visits?', 'Select coalition difficulty:', 'Please select the election you will run in:', 'This scenario was made by u/Vilvilea.', 'Please select your party:', 'Please select your candidate:', 'How would you like the seats to be allocated?', 'Select campaign difficulty:'];

        walkAndReplace(document.body, wordsToFind);
    }

    const bodyElement = document.body;
    bodyElement.style.backgroundAttachment = 'fixed';


    async function appendStyle() {
        var metaTag=document.createElement('meta');
        metaTag.name = "viewport";
        metaTag.content = "width=device-width, initial-scale=1";
        document.getElementsByTagName('head')[0].appendChild(metaTag);

        if (!document.querySelector('#radio-option-style')) {
            let style = document.createElement('style');
            style.type = 'text/css';
            style.id = 'radio-option-style';
            style.innerHTML = `
            .inner_inner_window {
              display: flex;
              flex-direction: column;
            }
              #question_form {
              flex: 1;
              box-sizing: border-box;
            }
            form[name="question"] {
              display: flex;
              flex-direction: column;
              justify-content: space-between;
              height: 100%;
              box-sizing: border-box;
            }

            .radio-option {
                border: 2px solid #000000;
                background-color: #f2f2f2;
                border-radius: 10px;
                padding: 5px;
                margin-bottom: 5px;
                transition: background-color 0.1s ease;
            }

            .radio-option:hover {
                background-color: #e0e0e0; /* or any other color that is slightly different than #f2f2f2 */
            }

            .radio-option:hover label{
                font-weight: bold;
            }

            .radio-option label {
              pointer-events: none;
            }

            /* Remove the default appearance of the radio button */
            input[type="radio"] {
              appearance: none;
              -webkit-appearance: none;
              -moz-appearance: none;
            }

            /* Create a custom radio button */
            input[type="radio"] {
              position: relative;
              display: inline-block;
              width: 16px; /* reduce width */
              height: 16px; /* reduce height */
              border: 2px solid black;
              border-radius: 4px; /* add border radius */
            }

            /* Create the cross icon (hidden when not checked) */
            input[type="radio"]:after {
              content: "";
              position: absolute;
              display: none;
            }

            /* Show the cross icon when checked */
            input[type="radio"]:checked:after {
              display: block;
            }

            input[type="radio"]:checked:after {
                content: "";
                display: inline-block;
                background-image: url("https://cdn.discordapp.com/attachments/1109846390575730788/1130851559371198544/Red-x-mark-transparent-background-1-Transparent-Images.png");
                background-repeat: no-repeat;
                background-size: contain; /* Or use a specific size like '10px 10px' */
                width: 20px;
                height: 20px;
                position: absolute; /* This takes the pseudo-element out of the document flow */
                left: -1px;
                top: -2px;
                z-index: 1;
            }

            .rounded-box {
                display: flex;
                flex-direction: column;
                justify-content: center;
                border: 4px solid black;
                margin: 10px;
                background-color: white;
                border-radius: 10px;
                overflow: hidden;
            }


             #candidate_pic,
            #running_mate_pic,
            .inner_window_sign_display {
                height: 14em;
            }
            #candidate_pic {
                margin-left: 12em;
            }
            .inner_window_sign_display {
                width: 27%;
            }
            .inner_window_question {
                height: auto;
            }
            #visit_window {
                height: auto;
            }
            #visit_content {
                height: 79%;
            }
            #state_info {
              height: 125%
            }
            #map_container {
              height: 30.78em
            }

            #overall_result,
            #election_description_window,
            #candidate_description_window,
            #running_mate_description_window,
            #opponent_selection_description_window{
                overflow: auto;
            }

            @media only screen and (max-width: 768px) {
                 .inner_window_question,
                 #results_container,
                 #map_footer,
                  #overall_details_container,
                  #main_content_area_reading,
                  #inner_window_2,
                  #inner_window_3,
                   #inner_window_4{
                    font-size: 1.8em;
                }
                #inner_window_2 select,
                    #inner_window_3 select,
                    #inner_window_4 select {
                        font-size: 1em;
                        padding: 10px;
                    }

                    #inner_window_2 button,
                    #inner_window_3 button,
                    #inner_window_4 button {
                        font-size: 1em;
                        line-height: 2em;
                    }

                 #inner_window_2,
                 #inner_window_3,
                 #inner_window_4{
                    overflow:auto;
                }
                #opponent_selection_description_window,
                #election_year_form,
                #candidate_description_window,
                #running_mate_description_window,
                #opponent_selection_description_window{
                height: auto;
                overflow: visible;
            }
                #overall_details_container{
                    height: 98%;
                    overflow: auto;
                }
                 #title_container{
                   font-size:1.2em
                }
                #visit_window {
                    font-size: 1.8em;
                    width: 90%;
                    left:5%;
                }
                  .mobile-hide {
                    display: none;
                  }
                 .inner_window_question button,
                    #visit_window button,
                     #map_footer{
                        line-height: 2.5em;
                    }
                 #drop_down_area_state {
                    margin-left: auto;
                    margin-right: auto;
                  }
            }
            `;

            document.head.appendChild(style);
        }
    }
    appendStyle();

    var invisibleElement = document.createElement('div');
    invisibleElement.style.display = 'none';
    invisibleElement.id = 'my-invisible-element';
    document.body.appendChild(invisibleElement);
}